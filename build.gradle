import java.text.SimpleDateFormat

allprojects {
    group = 'com.github.b0ch3nski'
    version = isBuildType('release') ?
            file("${rootDir}/VERSION").text.trim() :
            new SimpleDateFormat("yyyyMMddhhmmss").format(new Date())
}

subprojects {
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply from: "${rootDir}/libraries.gradle"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    plugins.withType(JavaPlugin) {
        tasks.withType(JavaCompile) {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
            options.fork = true
            options.encoding = 'UTF-8'
            options.compilerArgs \
                << "-Xlint:all" \
                << "-Werror"
        }

        test {
            testLogging {
                events "failed"
                showExceptions true
                exceptionFormat "full"
                showCauses true
                showStackTraces true
                showStandardStreams true
            }
        }

        jar.baseName = rootProject.name + '-' + project.name

        task sourcesJar(type: Jar, dependsOn: classes) {
            baseName = rootProject.name + '-' + project.name
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        javadoc.failOnError = true

        task javadocJar(type: Jar, dependsOn: javadoc) {
            baseName = rootProject.name + '-' + project.name
            classifier = 'javadoc'
            from javadoc
        }

        if (isBuildType('release')) build.dependsOn sourcesJar, javadocJar

        jacoco.toolVersion = '0.7.9'

        if (isBuildType('ci')) build.dependsOn jacocoTestReport, dependencyReport

        dependencies {
            compileOnly libraries.slf4j

            testCompile libraries.logback
            testCompile libraries.junit
            testCompile libraries.assertj
        }
    }
}

def isBuildType(String type) {
    project.hasProperty('build.type') && project.property('build.type') == type
}
